{"version":3,"sources":["components/card/card.component.js","components/card-list/card-list.components.js","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","users","a","fetchUsersAsync","allUsers","setState","fetch","response","json","e","searchField","target","value","state","this","filteredMonsters","filter","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mXAGaA,G,kBAAK,SAACC,GAAD,OAEd,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,gCAAML,EAAMI,QAAQE,SCFfC,EAAS,SAACP,GACnB,OAAO,yBAAKC,UAAU,aAAcD,EAAMQ,SAASC,IAAI,SAAAL,GAAO,OAC1D,kBAAC,EAAD,CAAMM,IAAKN,EAAQC,GAAID,QAASA,QCJ3BO,G,MAAU,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACnB,2BACIZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCkDHG,E,YAnDf,aAAc,IAAD,8BACX,+CAiBFC,MAlBa,qBAkBP,4BAAAC,EAAA,qEACe,EAAKC,kBADpB,OACAC,EADA,OAEJ,EAAKC,SAAS,CAACb,SAASY,IAFpB,yCAlBO,EAwBbD,gBAxBa,qBAwBG,8BAAAD,EAAA,qEACEI,MAAM,8CADR,cACVL,EADU,OAEVM,EAASN,EAAMO,OAFL,kBAGPD,GAHO,yCAxBH,EA8BbV,aAAa,SAACY,GACZ,EAAKJ,SAAS,CAACK,YAAYD,EAAEE,OAAOC,SA7BpC,EAAKC,MAAM,CACTrB,SAAS,GACTkB,YAAY,IAJH,E,iFAeXI,KAAKb,U,+BAmBE,IAAD,EAC0Ba,KAAKD,MAA9BrB,EADD,EACCA,SAASkB,EADV,EACUA,YACVK,EAAiBvB,EAASwB,OAAO,SAAA5B,GAAO,OAAEA,EAAQE,KAAK2B,cAAcC,SAASR,EAAYO,iBAEhG,OACE,yBAAKhC,UAAU,OACb,wBAAIA,UAAU,QAAd,oBAEA,kBAAC,EAAD,CAAWW,YAAa,kBAAmBC,aAAciB,KAAKjB,eAC9D,kBAAC,EAAD,CAAUL,SAAUuB,S,GA5CRI,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.ff91c2a6.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.style.css'\r\n\r\nexport const Card=(props)=>(\r\n\r\n    <div className='card-container'>\r\n        <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n        <h1> {props.monster.name}</h1>\r\n    </div>\r\n\r\n\r\n)\r\n\r\n","import React from 'react';\r\nimport './card-list.styles.css'\r\nimport {Card} from '../card/card.component'\r\n\r\n\r\nexport const CardList=(props)=>{\r\n    return <div className=\"card-list\">{ props.monsters.map(monster=>(\r\n        <Card key={monster.id} monster={monster}/>\r\n      ))}</div>\r\n}","import React from 'react'\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox=({placeholder,handleChange})=>(\r\n    <input\r\n        className='search' \r\n        type='search' \r\n        placeholder={placeholder} \r\n        onChange={handleChange}\r\n    \r\n    />\r\n\r\n)","import React from 'react';\nimport './App.css';\nimport {CardList}  from './components/card-list/card-list.components'\nimport { SearchBox } from './components/search-box/search-box.component';\n\n\nclass App extends React.Component {\nconstructor(){ \n  super()\n  this.state={\n    monsters:[],\n    searchField:''\n\n              }\n}\n\n componentDidMount(){\n  //  fetch('https://jsonplaceholder.typicode.com/users')\n  //  .then(response=>\n  //     response.json())\n  //   .then(users=>this.setState({monsters:users}));\n\n  this.users()\n }\n\nusers=async ()=>{\n  let allUsers=await this.fetchUsersAsync()\n  this.setState({monsters:allUsers})\n\n}\n\nfetchUsersAsync=async () =>{\n  let users=await fetch('https://jsonplaceholder.typicode.com/users')\n  let response=users.json()\n  return response\n  \n}\nhandleChange=(e)=>{\n  this.setState({searchField:e.target.value})\n}\n\nrender(){\n  const {monsters,searchField } = this.state;\n  const filteredMonsters=monsters.filter(monster=>monster.name.toLowerCase().includes(searchField.toLowerCase()))\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"head\">Monsters Rolodex</h1>\n      {/* <input type='search' placeholder='search' onChange={e=>this.setState({searchField:e.target.value})}/> */}\n      <SearchBox placeholder={'search-monsters'} handleChange={this.handleChange}/>\n      <CardList monsters={filteredMonsters} />  \n   \n    </div>\n  );\n}\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}